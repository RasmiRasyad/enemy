package visualloop5;

import java.util.ArrayList;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

/**
 *
 * @author rasmi
 */
public class VisualLoop5 extends Application implements Runnable {

    //Loop Parameters
    private final static int MAX_FPS = 60;
    private final static int MAX_FRAME_SKIPS = 5;
    private final static int FRAME_PERIOD = 1000 / MAX_FPS;

    //Thread
    private Thread thread;
    private volatile boolean running = true;

    //Canvas
    Canvas canvas = new Canvas(700, 700);

    //KEYBOARD HANDLER
    ArrayList<String> inputKeyboard = new ArrayList<String>();

    //ATTRIBUT
    float cx = 200f;
    float cy = (float) (canvas.getHeight() / 2.0f);
    float size = 50f;

    //Simulasi Gerak Jatuh Bebas
    float g = 0.12f;//percepatan gravitasi
    float t = 0f;//waktu
    float v = 0f;//kecepatan jatuh    
    float vUP = 8;

    //Pilar
    ArrayList<Pilar> pilars = new ArrayList<Pilar>();
    float vPilar = 2f;
    float spacePilar = 300;
    float deltaY = 160;
    float lebarPilar = 80;
    int m = 0;
    int M = 30;
    Color warnaPilar = Color.rgb(230, 126, 34);
    
    //Image im = new Image(getClass().getResourceAsStream("logo.jpg"));

    public VisualLoop5() {
        resume();
        initializePilars();
    }

    @Override
    public void start(Stage primaryStage) {
        Group root = new Group();
        Scene scene = new Scene(root);
        root.getChildren().add(canvas);
        //HANDLING KEYBOARD EVENT
        scene.setOnKeyPressed(
                new EventHandler<KeyEvent>() {
            public void handle(KeyEvent e) {
                String code = e.getCode().toString();
                if (!inputKeyboard.contains(code)) {
                    inputKeyboard.add(code);
                    System.out.println(code);
                }
            }
        }
        );

        scene.setOnKeyReleased(
                new EventHandler<KeyEvent>() {
            public void handle(KeyEvent e) {
                String code = e.getCode().toString();
                inputKeyboard.remove(code);
            }
        }
        );

        //HANDLING MOUSE EVENT
        scene.setOnMouseClicked(
                new EventHandler<MouseEvent>() {
            public void handle(MouseEvent e) {

            }
        }
        );

        //primaryStage.getIcons().add(new Image(getClass().getResourceAsStream("logo.jpg")));
        primaryStage.setTitle("Visual Loop");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
    
    private static float randomBetweenFloat(float min, float max) {
        return (float) (Math.random() * (max - min)) + min;
    }

    //INITIALIZE PILARS
    public void initializePilars() {
        float x = 600;
        float y1 = 140;
        float y2 = y1 + deltaY;
        Pilar pilar1 = new Pilar(canvas, lebarPilar, x, y1, y2, warnaPilar);
        pilars.add(pilar1);

        x += spacePilar;
        y1 = 220;
        y2 = y1 + deltaY;
        Pilar pilar2 = new Pilar(canvas, lebarPilar, x, y1, y2, warnaPilar);
        pilars.add(pilar2);

        x += spacePilar;
        y1 = 100;
        y2 = y1 + deltaY;
        Pilar pilar3 = new Pilar(canvas, lebarPilar, x, y1, y2, warnaPilar);
        pilars.add(pilar3);
    }

    //THREAD
    private void resume() {
        reset();
        thread = new Thread(this);
        running = true;
        thread.start();
    }

    //THREAD
    private void pause() {
        running = false;
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    //LOOP
    private void reset() {

    }

    //LOOP
    private void update() {
        if (inputKeyboard.contains("SPACE") && cy > 0) {
            cy -= vUP;//Melompat ke atas dengan kecepatan vUP
            t = 0;
        }
        //GRAVITASI
        //v = gt
        if (cy < (canvas.getHeight() - 0.5f * size)) {
            t++;
            v = g * t;
            cy += v;
        }
        //GESER PILAR
        if (inputKeyboard.contains("Q")) {
            //Update Pilars
            if (!pilars.isEmpty()) {
                for (Pilar pilar : pilars) {
                    pilar.updateX(vPilar);
                }
            }
            //REMOVE PILAR YANG SUDAH TIDAK NAMPAK DI SCENE
            if (!pilars.isEmpty()) {
                for (int i = pilars.size() - 1; i >= 0; i--) {
                    if (pilars.get(i).x < (0 - pilars.get(i).lebar)) {
                        pilars.remove(i);//Hapus pilar yang sudah tak nampak
                        //tambahkan pilar baru
                        float x = pilars.get(pilars.size() - 1).x;
                        x += spacePilar;
                        float y1 = randomBetweenFloat(10,(float)(canvas.getHeight()-10-deltaY));
                        float y2 = y1+deltaY;
                        Pilar pilar = new Pilar(canvas, 80, x, y1, y2, warnaPilar);
                        pilars.add(pilar);
                        System.out.println("N-PILAR: " + pilars.size());
                    }
                }
            }
        }

    }

    //LOOP
    private void draw() {
        try {
            if (canvas != null) {
                GraphicsContext gc = canvas.getGraphicsContext2D();
                gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());

                gc.save();
                gc.translate(cx, cy);
                gc.setFill(Color.GREEN);
                gc.fillRect(-0.5f * size, -0.5f * size, size, size);
                gc.restore();

//                gc.save();
//                gc.translate(cx, cy);
//                gc.drawImage(im, cx, cy);
//                gc.restore();

                //DRAW PILAR
                if (!pilars.isEmpty()) {
                    for (Pilar pilar : pilars) {
                        pilar.draw();
                    }
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        long beginTime;
        long timeDiff;
        int sleepTime = 0;
        int framesSkipped;
        //LOOP WHILE running = true; 
        while (running) {
            try {
                synchronized (this) {
                    beginTime = System.currentTimeMillis();
                    framesSkipped = 0;
                    update();
                    draw();
                }
                timeDiff = System.currentTimeMillis() - beginTime;
                sleepTime = (int) (FRAME_PERIOD - timeDiff);
                if (sleepTime > 0) {
                    try {
                        Thread.sleep(sleepTime);
                    } catch (InterruptedException e) {
                    }
                }
                while (sleepTime < 0 && framesSkipped < MAX_FRAME_SKIPS) {
                    update();
                    sleepTime += FRAME_PERIOD;
                    framesSkipped++;
                }
            } finally {

            }
        }
    }
}
